// +build !ignore_autogenerated

/*
MIT License

Copyright (c) 2018 PodKubervisor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

// This file was autogenerated by conversion-gen. Do not edit it manually!

package v1ext

import (
	kcodec "github.com/dbenque/kcodec/pkg/api/kcodec"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedConversionFuncs(
		Convert_v1ext_Item_To_kcodec_Item,
		Convert_kcodec_Item_To_v1ext_Item,
	)
}

func autoConvert_v1ext_Item_To_kcodec_Item(in *Item, out *kcodec.Item, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	return nil
}

// Convert_v1ext_Item_To_kcodec_Item is an autogenerated conversion function.
func Convert_v1ext_Item_To_kcodec_Item(in *Item, out *kcodec.Item, s conversion.Scope) error {
	return autoConvert_v1ext_Item_To_kcodec_Item(in, out, s)
}

func autoConvert_kcodec_Item_To_v1ext_Item(in *kcodec.Item, out *Item, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	// WARNING: in.Spec requires manual conversion: does not exist in peer-type
	return nil
}
